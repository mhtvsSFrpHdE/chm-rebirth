import crConfigSal as _crConfigSal  # NOQA: E402
import crCoreHeader as crCore  # NOQA: E402
import crEnvironmentSal  # NOQA: E402
import crOutputHeader as crOutput  # NOQA: E402
import crUnpack  # NOQA: E402

# Module scope config
environment_config_local = None
magic_value_config_local = None
message_config_local = None

# The method will modify config files generated by crBootstrap to add custom preprocessor


def apply_config_preprocessor(environment_config, magic_value_config, message_config):
    # Copy modified config
    global environment_config_local
    global magic_value_config_local
    global message_config_local

    environment_config_local, magic_value_config_local, message_config_local = _crConfigSal.apply_config_preprocessor_sal(environment_config, magic_value_config, message_config)

    # Transfer modified config back to main level scope
    return environment_config_local, magic_value_config_local, message_config_local

# The method will use preprocessed config to initialize other module


def init_any_other_module_require_config():
    # Init basic module
    crEnvironmentSal.init_environment_sal(magic_value_config_local, message_config_local)

    # crCore
    crCore.init_core_get_catalog_node(environment_config_local, message_config_local)
    crCore.init_core_get_index_html(environment_config_local, message_config_local)

    # crOutput
    crOutput.init_output(environment_config_local, message_config_local)

    # crUnpack
    crUnpack.init_crUnpack(environment_config_local)
